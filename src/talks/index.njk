---
layout: layouts/base.njk
css: talk.css
---

<section class="talks">
  <header class="with-filter">
    <h1><span id="count">{{ talks | liveTalks | length }} Talks</span></h1>
    <details>
      <summary class="pill-button filter"><span class="label">Filter Talks</span></summary>
      <div class="body">

        <div class="pill-list">
        {% for tag in talks | liveTalks | unique("tags") %}
          <label tabindex="0" class="checkbox-pill"><input value="{{ tag }}" type="checkbox"><span class="pill">{{ tag }}</span></label>
        {% endfor %}
        </div>

        <div class="pill-list">
        {% for year in talks | liveTalks | unique("event.year") %}
          <label tabindex="0" class="checkbox-pill"><input value="{{ year }}" type="checkbox"><span class="pill">{{ year }}</span></label>
        {% endfor %}
        <div class="pill-list">

      </div>
    </details>
  </header>


  <div class="talk-list">
    <ul>
    {%- for talk in talks | liveTalks %}
      <li class="talk-card" style="background-image: url(/images/__holding.png)" data-image="{{ talk.speaker.photo }}" data-year="{{ talk.event.year }}" data-tags=" {{ talk.tags | join(" ") }} ">
        <a href="/talks/{{ talk.slug }}/">
          <header>
            <h2>
              {{ talk.speaker.name }}
            </h2>
            <p>{{ talk.title }}</p>
          </header>
          <span class="pill">{{ talk.event.year }}</span>
        </a>
      </li>
    {%- endfor %}
    </ul>
  </div>
</section>

<script async defer>
const talks = $$('.talk-card');

function observerImages() {
  if (typeof IntersectionObserver !== 'undefined') {
    var observer = new IntersectionObserver(function(changes) {
      if ('connection' in navigator && navigator.connection.saveData === true) {
        return;
      }
      changes.forEach(function(change) {
        if (change.isIntersecting) {
          change.target.setAttribute(
            'style',
            `background-image: url(${change.target.getAttribute('data-image')})`
          );
          observer.unobserve(change.target);
        }
      });
    });

    document.querySelectorAll('li[data-image]').forEach(function(img) {
      observer.observe(img);
    });
  }
}

observerImages();


$('details').onchange = e => {
  let reset = true;
  const selection = $$('input:checked').map(_ => _.value).reduce((acc, curr) => {
    reset = false;
    if (/^\d+$/.test(curr)) {
      acc.years.push(curr);
    } else {
      acc.tags.push(curr);
    }
    return acc;
  }, { tags: [], years: []});

  let count = talks.length;
  if (reset) {
    // reset
    talks.filter(talk => {
      talk.hidden = false;
      return true;
    });
  } else {
    count = talks.filter(talk => {
      let res = !selection.years.length;

      if (selection.years.length) {
        res = !!selection.years.filter(year => talk.dataset.year === year).length;
      }

      if (selection.tags.length && res) {
        res = !!selection.tags.filter(tag => talk.dataset.tags.includes(` ${tag} `)).length;
      }
      talk.hidden = !res;
      return res;
    }).length;
  }

  $('#count').innerHTML = count === 1 ? '1 Talk' : `${count} Talks`;
}
</script>

